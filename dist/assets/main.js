(()=>{"use strict";var e={199:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){let e;switch(this.type){case"link":e=`\n          <a href="#${this.makeLink(this.text)}" class="footer-item link">\n            ${this.text}\n          </a>\n        `;break;case"button":e=`\n          <button class="footer-item button">\n            ${this.text} ${"More"===this.text?'<i class="fas fa-ellipsis-h"></i>':""}\n          </button>\n        `;break;default:e=`\n          <span class="footer-item">\n            ${this.text}\n          </span>\n        `}this.innerHTML=e}connectedCallback(){"More"===this.text&&this.querySelector(".footer-item").addEventListener("click",(()=>{alert("more clicked")}))}get text(){return null!=this.getAttribute("text")?this.getAttribute("text"):""}get type(){return this.getAttribute("type")}makeLink(e){return e.toLowerCase().split(" ").join("-")}}customElements.define("footer-menu",e)},490:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <header class="search-bar">\n        <form action="#" method="GET" class="search-form">\n          <label class="search-wrapper">\n            <span class="search-icon">\n              <i class="${this.faIcon}"></i>\n            </span>\n            <input type="text" placeholder="${this.inputPlaceholder}" class="search-input" />\n          </label>\n        </form>\n      </header>\n    `}connectedCallback(){this.querySelector(".search-form").addEventListener("submit",(e=>{e.preventDefault();const t=this.querySelector(".search-input").value;alert(`searching for ${t}`)}))}get faIcon(){return this.getAttribute("fa-icon")}get inputPlaceholder(){return this.getAttribute("input-placeholder")}}customElements.define("search-bar",e)},402:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){}}class t extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <div class="trend-content">\n        <a href="#${this.keyword}" class="trend-detail">\n          <span class="trend-location">Trending in ${this.location}</span>\n          <strong class="trend-keyword">${this.keyword}</strong>\n          <span class="trend-count">${this.retweetCount} Tweets</span>\n        </a>\n        <button class="more-btn">\n          <span class="btn-icon">\n            <i class="fas fa-ellipsis-h"></i>\n          </span>\n        </button>\n      </div>\n    `}connectedCallback(){this.querySelector(".more-btn").addEventListener("click",(()=>{alert("more clicked")}))}get location(){return this.getAttribute("location")}get keyword(){return this.getAttribute("keyword")}get retweetCount(){return this.getAttribute("retweet-count")}}customElements.define("trend-list",e),customElements.define("trend-item",t)},663:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML='\n      <footer class="trend-footer">\n        <button class="show-more-btn">Show more</button>\n      </footer>\n    '}connectedCallback(){this.querySelector(".show-more-btn").addEventListener("click",(()=>{alert("show more trends clicked")}))}}customElements.define("trend-footer",e)},256:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <header class="trend-header">\n        <h2 class="trend-title">Trends for you</h2>\n        <button class="open-btn">\n          <span class="btn-icon">\n            <i class="${this.btnfaIcon}"></i>\n          </span>\n        </button>\n      </header>\n    `}connectedCallback(){this.querySelector(".open-btn").addEventListener("click",(()=>{alert("open settings clicked")}))}get btnfaIcon(){return this.getAttribute("btn-fa-icon")}}customElements.define("trend-header",e)},106:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <a href="/" class="logo-link">\n        <span class="link-icon">\n          <i class="${this.faIcon}"></i>\n        </span>\n      </a>\n    `}get faIcon(){return this.getAttribute("fa-icon")}}customElements.define("nav-logo-link",e)},909:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){}}class t extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <a\n        href="${"home"===this.text?"/":`#${this.text}`}"\n        class="${this.isCurrent?"navmenu-link current":"navmenu-link"}"\n      >\n        <span class="${this.unread?"navmenu-icon notified":"navmenu-icon"}">\n          <i class="${this.faIcon}"></i>\n          ${this.unread?`<strong class="notif">${this.unread}</strong>`:""}\n        </span>\n        <span class="navmenu-text">${this.text}</span>\n      </a>\n    `}get text(){return this.getAttribute("text")}get faIcon(){return this.getAttribute("fa-icon")}get isCurrent(){return this.getAttribute("isCurrent")}get unread(){return this.getAttribute("unread")}}customElements.define("nav-menu-list",e),customElements.define("nav-menu-item",t)},522:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <button class="tweet-btn">${this.text}</button>\n    `}connectedCallback(){this.querySelector(".tweet-btn").addEventListener("click",(()=>{alert("create a tweet clicked")}))}get text(){return this.getAttribute("text")}}customElements.define("nav-tweet-btn",e)},237:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <button class="view-profile-btn" aria-label="view user profile">\n        <div class="user-info">\n          <div class="user-avatar">\n            <img src="${this.imgPath}" alt="${this.username} avatar" />\n          </div>\n          <div class="user-detail">\n            <span class="user-username">${this.username}</span>\n            <span class="user-userid">${this.userId}</span>\n          </div>\n        </div>\n  \n        <span class="btn-icon">\n          <i class="${this.btnFaIcon}"></i>\n        </span>\n      </button>\n    `}connectedCallback(){this.querySelector(".view-profile-btn").addEventListener("click",(()=>{alert("view user profile clicked")}))}get username(){return this.getAttribute("username")}get userId(){return this.getAttribute("user-id")}get imgPath(){return this.getAttribute("img-path")}get btnAria(){return this.getAttribute("btn-aria")}get btnFaIcon(){return this.getAttribute("btn-fa-icon")}}customElements.define("user-profile",e)},21:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <div class="fixed-wrapper">\n        <header class="page-header">\n          <h2 class="page-title">${this.pageTitle}</h2>\n            <button button aria-label="Top Tweets On" class="top-tweets-btn">\n              <span class="btn-icon"\n                ><i class="${this.btnFaIcon}"></i\n              ></span>\n            </button>\n        </header>\n      </div>\n    `}connectedCallback(){this.querySelector(".top-tweets-btn").addEventListener("click",(()=>{alert("top tweets on clicked")}))}get pageTitle(){return this.getAttribute("page-title")}get btnFaIcon(){return this.getAttribute("btn-fa-icon")}}customElements.define("page-header",e)},585:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <a href="#${this.username}" class="avatar-link">\n        <img src="${this.imgPath}" alt="${this.username} avatar" />\n      </a>\n    `}get imgPath(){return this.getAttribute("img-path")}get username(){return this.getAttribute("username")}}customElements.define("tweet-avatar",e)},885:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){}}class t extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML=`\n      <button button type="button" aria-label="${this.btnAria}" class="option-btn">\n        <span class="btn-icon">\n          <i class="${this.btnFaIcon}"></i>\n        </span>\n      </button>\n    `}connectedCallback(){this.querySelector(".option-btn").addEventListener("click",(()=>{alert(`${this.btnAria} clicked`)}))}get btnFaIcon(){return this.getAttribute("btn-fa-icon")}get btnAria(){return this.getAttribute("btn-aria")}}customElements.define("tweet-option-list",e),customElements.define("tweet-option-item",t)},593:()=>{class e extends HTMLElement{constructor(){super(),this.render()}render(){this.innerHTML='\n      <button type="button" class="submit-btn" aria-label="submit a tweet">tweet</button>\n    '}connectedCallback(){this.querySelector(".submit-btn").addEventListener("click",(()=>{alert("submit a tweet clicked")}))}}customElements.define("tweet-submit-btn",e)}},t={};function n(s){var i=t[s];if(void 0!==i)return i.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}(()=>{n(106),n(909),n(522),n(237),n(21),n(585),n(885),n(593);const e=[{profile:{username:"Pineapple",userId:"@Pineapple",posted:{time:"3s",text:"3 seconds ago"},imgPath:"./dist/static/imgs/tweeter_profile-1.jpg"},content:{text:"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ex enim nemo\n    maiores voluptate repellendus, voluptas voluptates cumque eaque quaerat et\n    placeat iusto omnis. Odit enim expedita dolorum provident dolores sit!",img:{path:"./dist/static/imgs/tweeter-1.jpg",alt:"donut"}}},{profile:{username:"BirdHeart",userId:"@BirdHeart",posted:{time:"3m",text:"3 minutes ago"},imgPath:"./dist/static/imgs/tweeter_profile-2.jpg"},content:{text:"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ex enim nemo\n    maiores voluptate repellendus, voluptas voluptates cumque eaque quaerat et\n    placeat iusto omnis. Odit enim expedita dolorum provident dolores sit!",img:{path:"./dist/static/imgs/tweeter-2.jpg",alt:"donut"}}},{profile:{username:"PinkCocktail",userId:"@PinkCocktail",posted:{time:"3h",text:"3 hours ago"},imgPath:"./dist/static/imgs/tweeter_profile-3.jpg"},content:{text:"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ex enim nemo\n    maiores voluptate repellendus, voluptas voluptates cumque eaque quaerat et\n    placeat iusto omnis. Odit enim expedita dolorum provident dolores sit!",img:{path:"./dist/static/imgs/tweeter-3.jpg",alt:"donut"}}},{profile:{username:"Flamingo",userId:"@Flamingo",posted:{time:"3 days ago",text:"3 days ago"},imgPath:"./dist/static/imgs/tweeter_profile-4.jpg"},content:{text:"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ex enim nemo\n    maiores voluptate repellendus, voluptas voluptates cumque eaque quaerat et\n    placeat iusto omnis. Odit enim expedita dolorum provident dolores sit!",img:{path:"./dist/static/imgs/tweeter-4.jpg",alt:"donut"}}},{profile:{username:"Pineapple",userId:"@Pineapple",posted:{time:"3 weeks ago",text:"3 weeks ago"},imgPath:"./dist/static/imgs/tweeter_profile-1.jpg"},content:{text:"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ex enim nemo\n    maiores voluptate repellendus, voluptas voluptates cumque eaque quaerat et\n    placeat iusto omnis. Odit enim expedita dolorum provident dolores sit!",img:{path:"./dist/static/imgs/tweeter-5.jpg",alt:"donut"}}}];class t extends HTMLElement{constructor(){super(),this.render()}render(){}}class s extends HTMLElement{constructor(){super(),this.render()}render(){if(null==this.feed)return;const{profile:{username:e,userId:t,posted:{time:n,text:s},imgPath:i},content:{text:r,img:{path:a,alt:o}}}=this.feed;this.innerHTML=`\n      <article class="feed-container">\n        <h3 class="sr-only">A Tweet from ${e}</h3>\n  \n        <a href="#${e}" class="feed-avatar">\n          <img src="${i}" alt="${e} avatar" />\n        </a>\n  \n        <div class="feed-content">\n\n          <header class="feed-header">\n            <dl class="feed-profile">\n              <dt class="sr-only">username</dt>\n              <dd>\n                <a href="#${e}" class="profile-username">\n                  ${e}\n                </a>\n              </dd>\n          \n              <dt class="sr-only">user id</dt>\n              <dd>\n                <span class="profile-userid">${t}</span>\n              </dd>\n          \n              <dt class="sr-only">Posted</dt>\n              <dd>\n                <span aria-label="${s}" class="profile-posted">\n                  ${n}\n                </span>\n              </dd>\n            </dl>\n        \n            <button class="more-btn">\n              <span class="btn-icon">\n                <i class="fas fa-ellipsis-h"></i>\n              </span>\n            </button>\n          </header>\n\n          <div class="feed-body">\n            <p class="feed-text">\n              ${r}\n            </p>\n            <div class="feed-img">\n              <img src="${a}" alt="${o}" />\n            </div>\n          </div>\n\n          <footer class="feed-footer">\n            <ul class="feed-btnlist">\n              <li class="feed-btnitem">\n                <action-btn type="reply" fa-icon="far fa-comment" count="0"></action-btn>\n              </li>\n              <li class="feed-btnitem">\n                <action-btn type="retweet" fa-icon="fas fa-retweet" count="0"></action-btn>\n              </li>\n              <li class="feed-btnitem">\n                <action-btn type="like" fa-icon="far fa-heart" count="0"></action-btn>\n              </li>\n              <li class="feed-btnitem">\n                <action-btn type="share" fa-icon="fas fa-external-link-alt" count="0"></action-btn>\n              </li>\n            </ul>\n          </footer>\n        </div>\n      </article>\n    `}connectedCallback(){this.querySelector(".more-btn").addEventListener("click",(()=>{alert("more clicked")}))}get feed(){const t=Number(this.getAttribute("feed-index"));return null!=t?e[t]:null}}class i extends HTMLElement{constructor(){super()}render(){this.innerHTML=`\n    <button aria-label="${this.type}" class="action-btn ${this.type}-btn">\n      <span class="btn-icon">\n        <i class="${this.faIcon}"></i>\n      </span>\n    </button>\n    <strong aria-label="${this.getAriaLabel(this.count,this.type)}" class="action-count">\n      ${this.count}\n    </strong>\n    `}connectedCallback(){this.render(),this.addOnClick()}static get observedAttributes(){return["count"]}attributeChangedCallback(e,t,n){"count"===e&&(this.render(),this.addOnClick())}get type(){return null!=this.getAttribute("type")?this.getAttribute("type"):""}get faIcon(){return null!=this.getAttribute("fa-icon")?this.getAttribute("fa-icon"):""}get count(){return null!=this.getAttribute("count")?Number(this.getAttribute("count")):0}set count(e){this.setAttribute("count",String(e))}addOnClick(){const e=this.querySelector(".action-btn");null==e||e.addEventListener("click",(()=>{this.count+=1}))}getAriaLabel(e,t){return 0===e||1===e?`${e} ${t}`:"reply"===t?`${e} replies`:`${e} ${t}s`}}customElements.define("timeline-feed-list",t),customElements.define("timeline-feed-item",s),customElements.define("action-btn",i),n(490),n(256),n(402),n(663),n(199)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,